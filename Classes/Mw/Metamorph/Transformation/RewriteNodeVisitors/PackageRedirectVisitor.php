<?php
namespace Mw\Metamorph\Transformation\RewriteNodeVisitors;

use Mw\Metamorph\Transformation\Helper\CommentHelper;
use PhpParser\Node;
use TYPO3\Flow\Annotations as Flow;

class PackageRedirectVisitor extends AbstractControllerVisitor {

	/**
	 * @var CommentHelper
	 * @Flow\Inject
	 */
	protected $commentHelper;

	public function leaveControllerNode(Node $node) {
		if ($node instanceof Node\Expr\MethodCall) {
			$var  = $node->var;
			$name = $node->name;

			$isRedirect =
				($var instanceof Node\Expr\Variable) &&
				($var->name == 'this') &&
				$name == 'redirect';

			if ($isRedirect && count($node->args) >= 3) {
				$extensionKey    = $node->args[2];
				$packageMappings = $this->configuration->getPackageMappingContainer();

				if ($extensionKey->value instanceof Node\Scalar\String) {
					$extensionKeyValue = $extensionKey->value->value;
					$packageMapping    = $packageMappings->getPackageMapping($extensionKeyValue);

					if ($packageMapping) {
						$node->args[2]->value = new Node\Scalar\String($packageMapping->getPackageKey());
						return $node;
					} else {
						return $this->commentHelper->addCommentToNode(
							$node,
							'@todo: No Flow package found for TYPO3 extensions "' . $extensionKeyValue . '"!'
						);
					}
				} elseif ($extensionKey->value instanceof Node\Expr\ConstFetch && $extensionKey->value->name == 'NULL') {
					return NULL;
				} else {
					$arrayItems = [];

					foreach ($packageMappings->getPackageMappings() as $packageMapping) {
						$arrayItems[] = new Node\Expr\ArrayItem(
							new Node\Scalar\String($packageMapping->getPackageKey()),
							new Node\Scalar\String($packageMapping->getExtensionKey())
						);
					}

					$arrayNode       = new Node\Expr\Array_($arrayItems);
					$variableNode    = new Node\Expr\Variable('metamorphPackages');
					$arrayAssignment = new Node\Expr\Assign($variableNode, $arrayNode);

					$arrayDereference     = new Node\Expr\ArrayDimFetch($variableNode, $extensionKey->value);
					$node->args[2]->value = $arrayDereference;

					$this->commentHelper->addCommentToNode(
						$arrayAssignment,
						'@todo: This mapping was automatically generated by Metamorph. Please check for correctness.'
					);

					return [$arrayAssignment, $node];
				}
			}
		}

		return NULL;
	}
}