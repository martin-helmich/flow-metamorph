<?php
namespace Mw\Metamorph\Step\TransformationVisitor;

/*                                                                        *
 * This script belongs to the TYPO3 Flow package "Mw.Metamorph".          *
 *                                                                        *
 * (C) 2014 Martin Helmich <m.helmich@mittwald.de>                        *
 *          Mittwald CM Service GmbH & Co. KG                             *
 *                                                                        */

use Mw\Metamorph\Domain\Model\State\PackageMapping;
use Mw\Metamorph\Transformation\Helper\CommentHelper;
use Mw\Metamorph\Transformation\TransformationVisitor\AbstractControllerVisitor;
use PhpParser\Node;
use TYPO3\Flow\Annotations as Flow;

/**
 * Visitor class that replaces extension keys in redirect calls.
 *
 * This visitor replaces extension keys that are used in redirect calls with
 * the respective package names.
 *
 * Example::
 *
 *     // Before
 *     $this->redirect('action', 'MyController', 'my_extension');
 *
 *     // After
 *     $this->redirect('action', 'MyController', 'My.Package');
 *
 * When a non-NULL expression is used as extension key, this transformation will
 * insert a lookup construct here
 *
 * Example::
 *
 *     // Before
 *     $this->redirect('action', 'MyController', magicFunction());
 *
 *     // After
 *     $metamorphExtensions = ['my_extension' => 'My.Package'];
 *     $this->redirect('action', 'MyController', $metamorphExtensions[magicFunction()]);
 *
 * @package    Mw\Metamorph
 * @subpackage Transformation\RewriteNodeVisitors
 */
class PackageRedirectVisitor extends AbstractControllerVisitor {

	/**
	 * @var CommentHelper
	 * @Flow\Inject
	 */
	protected $commentHelper;

	/**
	 * Called when the visitor leaves a node inside an ActionController.
	 *
	 * @param Node $node The node to process
	 * @return array|null|Node The node replacement
	 */
	public function leaveControllerNode(Node $node) {
		if (!$node instanceof Node\Expr\MethodCall) {
			return NULL;
		}

		$var        = $node->var;
		$isRedirect =
			(($var instanceof Node\Expr\Variable) && ($var->name == 'this')) &&
			$node->name == 'redirect';

		if (FALSE === ($isRedirect && count($node->args) >= 3)) {
			return NULL;
		}

		$extensionKey    = $node->args[2];
		$packageMappings = $this->configuration->getPackageMappingContainer();

		// Simply pass NULL values
		if ($extensionKey->value instanceof Node\Expr\ConstFetch && $extensionKey->value->name == 'NULL') {
			return NULL;
		}

		// When the extension key is a string literal (should be the case almost anytime),
		// simply look in the package mapping for this extension key and replace the
		// literal with the matching package key.
		if ($extensionKey->value instanceof Node\Scalar\String) {
			$extensionKeyValue = $extensionKey->value->value;
			$packageMapping    = $packageMappings->getPackageMapping($extensionKeyValue);

			if ($packageMapping) {
				$node->args[2]->value = new Node\Scalar\String($packageMapping->getPackageKey());
				return $node;
			} else {
				return $this->commentHelper->addCommentToNode(
					$node,
					'@todo: No Flow package found for TYPO3 extensions "' . $extensionKeyValue . '"!'
				);
			}
		}

		// When the extension key is some other kind of expression, create a lookup table
		// with all known package mappings and use the expression as lookup key. This is
		// crude, but should work in nearly any case.
		$arrayItems = array_map(function(PackageMapping $m) {
			return new Node\Expr\ArrayItem(
				new Node\Scalar\String($m->getPackageKey()),
				new Node\Scalar\String($m->getExtensionKey())
			);
		}, $packageMappings->getPackageMappings());

		$arrayNode       = new Node\Expr\Array_($arrayItems);
		$variableNode    = new Node\Expr\Variable('metamorphExtensions');
		$arrayAssignment = new Node\Expr\Assign($variableNode, $arrayNode);

		$arrayDereference     = new Node\Expr\ArrayDimFetch($variableNode, $extensionKey->value);
		$node->args[2]->value = $arrayDereference;

		$this->commentHelper->addCommentToNode(
			$arrayAssignment,
			'@todo: This mapping was automatically generated by Metamorph. Please check for correctness.'
		);

		return [$arrayAssignment, $node];
	}
}